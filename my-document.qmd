---
title: "My Analysis"
author: "Junze Zhang, Joshua Cook"
format: html
execute:
  freeze: auto
---

# Introduction

This document will demonstrate reproducible code execution. When you render this Quarto document, Quarto will:

-   Create a Python virtual environment.
-   Install all packages listed in `requirements.txt`.
-   Execute all code chunks in that environment.

You don't need to do anything else. Just open `my-document.qmd` in RStudio and click "Render." Everyone who gets this project with the `_quarto.yml` and `requirements.txt` will have the same environment.

## R Code Example

First, let's demonstrate some data manipulation and visualization using R:

```{r}
#| warning: false
#| message: false

# Load required packages
library(tidyverse)  # includes ggplot2, dplyr, etc.

# Create sample data
set.seed(123)
data <- tibble(
  x = rnorm(100),
  y = 2 * x + rnorm(100, sd = 0.5),
  category = sample(letters[1:3], 100, replace = TRUE)
)

# Data manipulation with dplyr
summary_stats <- data %>%
  group_by(category) %>%
  summarise(
    mean_x = mean(x),
    mean_y = mean(y),
    n = n()
  )

# Print summary statistics
print("Summary Statistics by Category:")
knitr::kable(summary_stats)

# Create visualization with ggplot2
ggplot(data, aes(x = x, y = y, color = category)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", se = TRUE) +
  theme_minimal() +
  labs(
    title = "Scatter Plot with Linear Regression by Category",
    x = "X Variable",
    y = "Y Variable",
    color = "Category"
  )
```

## Python Code Example

Now let's show how Python can be used in the same document:

```{python}
import numpy as np

# Create a 1D array
array_1d = np.array([1, 2, 3, 4, 5])
print("Hello World")
print(array_1d)
```

## Combining R and Python

We can even use results from one language in the other:

```{r}
#| warning: false
#| message: false

# Access Python's numpy array in R
py_array <- reticulate::py$array_1d
print("Python array accessed in R:")
print(py_array)

# Create new data with this array
tibble(
  x = py_array,
  y = py_array^2
) %>%
  ggplot(aes(x = x, y = y)) +
  geom_point(size = 3, color = "blue") +
  geom_line(color = "red") +
  theme_minimal() +
  labs(
    title = "Squared Values of Python Array",
    x = "Original Values",
    y = "Squared Values"
  )
```
