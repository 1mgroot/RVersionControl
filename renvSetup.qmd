---
title: "Environment Setup"
author: "Your Name"
format: 
  html:
    embed-resources: true
---

# Environment Setup Process

This document will snapshot the current R and Python environments.

## Initialize and Snapshot Environment

```{r}
#| warning: false
#| message: false

# Initialize renv if not already initialized
if (!file.exists("renv.lock")) {
  renv::init()
}

# Take a snapshot of both R and Python environments
renv::snapshot(prompt = FALSE)
```

## Document Dependencies

### R Packages

Here are the currently installed R packages:

```{r}
#| warning: false
#| message: false

# Get R package information
cat("R Version:", R.version$version.string, "\n\n")

# Read renv.lock to get package versions
lock_data <- jsonlite::read_json("renv.lock")
packages <- lock_data$Packages

# Get unique direct dependencies
deps <- unique(renv::dependencies()$Package)

cat("Direct R Dependencies (packages explicitly used in code):\n")
if (length(deps) > 0) {
  # Create a formatted string for each package with version from renv.lock
  pkg_info <- sapply(deps, function(pkg) {
    version <- if (!is.null(packages[[pkg]])) packages[[pkg]]$Version else "unknown"
    sprintf("- %s: %s", pkg, version)
  })
  cat(paste(sort(pkg_info), collapse = "\n"), "\n")
} else {
  cat("No direct dependencies found.\n")
}

# Show environment status
cat("\nR Environment Status:\n")
renv::status()
```

### Python Packages

Here are the currently installed Python packages:

```{python}
#| warning: false

import sys
import pkg_resources
from tabulate import tabulate

# Print Python version
print(f"Python Version: {sys.version.split()[0]}")

# Get all installed packages
packages = sorted([
    [pkg.key, pkg.version]
    for pkg in pkg_resources.working_set
])

# Display all packages
print("\nInstalled Python Packages:")
print(tabulate(packages, headers=['Package', 'Version'], tablefmt='pipe'))
```

## Configuration Files Created

The following configuration files have been created or updated:

1. `renv.lock` - R package versions and dependencies
2. `requirements.txt` - Python package requirements

## Next Steps

1. Commit these files to version control:
   ```bash
   git add renv.lock requirements.txt
   git commit -m "chore: Update environment snapshots"
   ```

2. Other users can restore this environment using `restoreRenv.qmd`
